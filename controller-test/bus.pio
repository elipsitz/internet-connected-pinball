; Pull memory writes from the FIFO and write them to the bus.
;
; The clock pin will always be clocking at 1 MHz
; Each FIFO word will be: [8 bit data][12 bit addr][12 bit addr]
; Addresses must match.
; Physical output of address will be [00XX][00XX][XXXX][XXXX]
;
; 1 side-set pin, optional, which will be the clock
; SET pin will be the VMA pin
; output pins: 12 LSB will be address, 8 MSB will be data
;
; Clock divider = 3: 1 PIO cycle == 25ns, 20 cycles per clock edge

.program bus
.side_set 1 opt

; Initialize X to 0xFFFFFFFF
    mov x, !null

.wrap_target
    ; Clock to 0 and wait.
    nop     [5]     side 0      

    ; Pull data ([8 bit data][12 bit addr][12 bit addr]) into OSR.
    pull noblock
    mov y, osr
    ; Set VMA and Output address (low 12 bits)
    set pins 0
    jmp x!=y, vma_on  ; If x!=y, we got data during `pull noblock`.
    jmp vma_end
vma_on:
    set pins 1
vma_end:
    out pins, 12

    ; Wait for the rest of the 500ns (at least 160ns).
    nop     [7]

    ; Clock to 1, wait up to 225 ns, then write data+address to PINS.
    nop     [7]  side 1
    out pins, 20

    ; Wait for the rest of the 500ns.
    nop      [7]
    nop      [2]
.wrap

% c-sdk {
static inline void bus_program_init(
    PIO pio, uint sm, uint offset, uint pin_clk, uint pin_vma, uint pin_ad_base
) {
    // Connect pins.
    const int pin_ad_count = 20;
    pio_gpio_init(pio, pin_clk);
    pio_gpio_init(pio, pin_vma);
    for (uint i = pin_ad_base; i < pin_ad_base + pin_ad_count; i += 1) {
        pio_gpio_init(pio, i);
    }
    pio_sm_set_consecutive_pindirs(pio, sm, pin_clk, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, pin_vma, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, pin_ad_base, pin_ad_count, true);

    pio_sm_config c = bus_program_get_default_config(offset);

    // 1 set pin: VMA
    // 1 side-set pin: CLK
    // 20 out pins: 12 address and 8 data.
    sm_config_set_set_pins(&c, pin_vma, 1);
    sm_config_set_sideset_pins(&c, pin_clk);
    sm_config_set_out_pins(&c, pin_ad_base, pin_ad_count);

    // Clock divider: 120MHz system clock / 3 == 25ns period
    sm_config_set_clkdiv_int_frac(&c, 3, 0);

    // We only use the TX FIFO.
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // Load config, jump to the start, and enable the state machine.
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}
